from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import json

def load_resources(filename='resources.json'):
    with open(filename, encoding='utf-8') as f:
        return json.load(f)

RESOURCES = load_resources()

REPLY_KB = ReplyKeyboardMarkup([["–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã"]], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –±—ã—Å—Ç—Ä—ã–º —Å—Å—ã–ª–∫–∞–º. "
        "–í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /all –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '–≤—Å–µ'."
    )
    await update.message.reply_text(text, reply_markup=REPLY_KB)

async def all_resources(update, context):
    if not RESOURCES:
        await update.effective_message.reply_text("–°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—É—Å—Ç.", reply_markup=REPLY_KB)
        return
    keyboard = [
        [InlineKeyboardButton(res['name'], url=res['url'])] for res in RESOURCES
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.effective_message.reply_text("–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "show_all_resources":
        await all_resources(update, context)

def search_resources(query):
    query = query.lower()
    results = []
    for res in RESOURCES:
        keywords = res['keywords'] + [res['name'].lower()]
        if any(query in kw.lower() for kw in keywords):
            results.append(res)
    return results

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if text in ("–≤—Å–µ", "–≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã", "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã"):
        await all_resources(update, context)
        return
    matches = search_resources(text)
    if not matches:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É.", reply_markup=REPLY_KB)
        return
    keyboard = [
        [InlineKeyboardButton(res['name'], url=res['url'])]
        for res in matches
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞—à—ë–ª —Ç–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã:", reply_markup=reply_markup)

def main():
    app = Application.builder().token("8473436388:AAHzgKeLC7qatCaHbdNuVSeLH6UJjrhjFS0").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("all", all_resources))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == '__main__':
    main()

